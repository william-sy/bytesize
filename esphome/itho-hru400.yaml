
esphome:
  name: wtw-rs485
  friendly_name: WTW-RS485
  comment: Itho Daalderop HRU 400 WTW

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key:        !secret wtw-api

ota:
  password:     !secret wtw-ota

wifi:
  ssid:         !secret lot_wifi_ssid
  password:     !secret lot_wifi_password
  fast_connect: on
  use_address:  192.168.13.19

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid:     "HRU-RS485 Fallback Hotspot"
    password: !secret wtw-fbw

captive_portal:

uart:
  id:          uart_modbus_hru
  tx_pin:      19
  rx_pin:      22
  baud_rate:   19200
  data_bits:   8
  stop_bits:   1     # Make this 2 if Parity is none
  parity:      EVEN
  debug:
    direction: BOTH

modbus:
  id: modbus_hru
  uart_id: uart_modbus_hru
  #send_wait_time: 2000ms

modbus_controller:
  - id: hru
    address:          0x48 # resolves to as per manual 72
    modbus_id:        modbus_hru
    setup_priority:   -10
    update_interval:  20s
    command_throttle: 300ms


sensor:
## Info:
# address = register number - 1
##
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Levensduur teller deel 2"
    id: lifetime_counter_part2
    register_type: holding
    address: 4001
    value_type: U_WORD
    unit_of_measurement: "h"
    skip_updates: 10
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Hoogste gemeten CO2-concentratie"
    id: hru_co2_maxperc
    register_type: holding
    address: 3011
    value_type: U_WORD
    unit_of_measurement: "ppm"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Snelheid toevoerventilator "
    id: hru_rpm_toevoerventilator
    register_type: holding
    address: 3020
    value_type: U_WORD
    unit_of_measurement: "rpm"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Snelheid afvoerventilator"
    id: hru_rpm_afvoerventilator
    register_type: holding
    address: 3021
    value_type: U_WORD
    unit_of_measurement: "rpm"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Werkelijke vermogen voedingsventilator"
    id: hru_pwr_toevoerventilator
    register_type: holding
    address: 3022
    value_type: U_WORD
    unit_of_measurement: "W"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Werkelijke vermogen afvoerventilator"
    id: hru_pwr_afvoerventilator
    register_type: holding
    address: 3023
    value_type: U_WORD
    unit_of_measurement: "W"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Volumestroom van buitenaf in m3/h"
    id: hru_m3h_toevoer_external
    register_type: holding
    address: 3030
    value_type: U_WORD
    unit_of_measurement: "m3/h"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Massastroom van buitenaf in kg/h"
    id: hru_mass_toevoer_external
    register_type: holding
    address: 3031
    value_type: U_WORD
    unit_of_measurement: "kg/h"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "Temperatuur van buitenaf "
    id: hru_temp_toevoer_external
    register_type: holding
    address: 3032
    value_type: S_WORD
    filters:
      - multiply: 0.1
    unit_of_measurement: "°C"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Relatieve vochtigheid van buitenaf"
    id: hru_rel_hum_toevoer_external
    register_type: holding
    address: 3033
    value_type: U_WORD
    unit_of_measurement: "%"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Volumestroom door vorstklep in m3/h"
    id: hru_m3h_vorstklep
    register_type: holding
    address: 3040
    value_type: U_WORD
    unit_of_measurement: "m3/h"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Volumestroom gemengd in m3/h"
    id: hru_m3h_toevoer_gemengd
    register_type: holding
    address: 3050
    value_type: U_WORD
    unit_of_measurement: "m3/h"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Massastroom gemengd in kg/h"
    id: hru_kg_toevoer_gemengd
    register_type: holding
    address: 3051
    value_type: U_WORD
    unit_of_measurement: "kg/h"
    state_class: "measurement"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "Temperatuur gemengd "
    id: hru_temp_toevoer_gemengd
    register_type: holding
    address: 3052
    value_type: S_WORD
    filters:
      - multiply: 0.1
    unit_of_measurement: "°C"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Relatieve vochtigheid gemengd"
    id: hru_hum_toevoer_gemengd
    register_type: holding
    address: 3053
    value_type: U_WORD
    unit_of_measurement: "%"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Volumestroom naar gebouw in m3/h"
    id: hru_m3h_toevoer_binnen_total
    register_type: holding
    address: 3060
    value_type: U_WORD
    unit_of_measurement: "m3/h"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Massastroom naar gebouw in kg/h"
    id: hru_kgh_toevoer_binnen_total
    register_type: holding
    address: 3061
    value_type: U_WORD
    unit_of_measurement: "kg/h"
    state_class: "measurement"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "Temperatuur naar gebouw"
    id: hru_temp_naar_binnen
    register_type: holding
    address: 3062
    value_type: S_WORD
    filters:
      - multiply: 0.1
    unit_of_measurement: "°C"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Relatieve vochtigheid naar gebouw"
    id: hru_rel_hum_toevoer
    register_type: holding
    address: 3063
    value_type: U_WORD
    unit_of_measurement: "%"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Volumestroom van gebouw in m3/h"
    id: hru_m3h_afvoer_binnen
    register_type: holding
    address: 3070
    value_type: U_WORD
    unit_of_measurement: "m3/h"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Massastroom van gebouw in kg/h"
    id: hru_kgh_afvoer_binnen
    register_type: holding
    address: 3071
    value_type: U_WORD
    unit_of_measurement: "kg/h"
    state_class: "measurement"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "Temperatuur van gebouw"
    id: hru_temp_binnen
    register_type: holding
    address: 3072
    value_type: S_WORD
    filters:
      - multiply: 0.1
    unit_of_measurement: "°C"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Relatieve vochtigheid van gebouw in %"
    id: hru_rel_hum_binnen
    register_type: holding
    address: 3073
    value_type: U_WORD
    unit_of_measurement: "%"
    state_class: "measurement"
    filters:
      - or:
          - delta: 1
          - heartbeat: 60s
      - lambda:
          float rand1 = rand() % 1;
          return x + rand1;
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Volumestroom naar buiten in m3/h"
    id: hru_m3h_afvoer_buiten
    register_type: holding
    address: 3080
    value_type: U_WORD
    unit_of_measurement: "m3/h"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Massastroom naar buiten in kg/h"
    id: hru_kgh_afvoer_buiten
    register_type: holding
    address: 3081
    value_type: U_WORD
    unit_of_measurement: "kg/h"
    state_class: "measurement"
  - platform: modbus_controller # 0x91 type, signed 16bit/10
    modbus_controller_id: hru
    name: "Temperatuur naar buiten "
    id: hru_temp_afvoer_buiten
    register_type: holding
    address: 3082
    value_type: S_WORD
    filters:
    - multiply: 0.1
    unit_of_measurement: "°C"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Relatieve vochtigheid naar buiten "
    id: hru_hum_afvoer_buiten
    register_type: holding
    address: 3083
    value_type: U_WORD
    unit_of_measurement: "%"
    state_class: "measurement"
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Mengstroom teller deel 2"
    id: mixflow_counter_part2
    register_type: holding
    address: 4003
    value_type: U_WORD
    unit_of_measurement: "m3"
    state_class: "measurement"
    skip_updates: 10

number:
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Filter vuil - volumemeting"
    id: HRU_errors1
    register_type: holding
    address: 200
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Filter vuil - tijdmeting"
    id: HRU_errors2
    register_type: holding
    address: 201 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Flow - afvoervolume"
    id: HRU_errors3
    register_type: holding
    address: 202 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Flow - toevoervolume"
    id: HRU_errors4
    register_type: holding
    address: 203 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Vochtsensor Intern"
    id: HRU_errors11
    register_type: holding
    address: 210 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Vochtsensor afvoer"
    id: HRU_errors12
    register_type: holding
    address: 211 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Vochtsensor toevoer"
    id: HRU_errors13
    register_type: holding
    address: 212 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Temperatuur sensor intern"
    id: HRU_errors14
    register_type: holding
    address: 213 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Temperatuur sensor toevoer"
    id: HRU_errors15
    register_type: holding
    address: 214 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Temperatuur sensor afvoer"
    id: HRU_errors16
    register_type: holding
    address: 215 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - bypassklep 1"
    id: HRU_errors21
    register_type: holding
    address: 220 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - bypassklep 2"
    id: HRU_errors22
    register_type: holding
    address: 221 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - Electracompartiment"
    id: HRU_errors23
    register_type: holding
    address: 222 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - volumesensor toevoer"
    id: HRU_errors31
    register_type: holding
    address: 230 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - volumesensor afvoer"
    id: HRU_errors32
    register_type: holding
    address: 231 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - ventilator module afvoer"
    id: HRU_errors33
    register_type: holding
    address: 232 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: true
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Fout - ventilator module toevoer"
    id: HRU_errors34
    register_type: holding
    address: 233 # 0x000E
    value_type: U_WORD
    skip_updates: 10
    use_write_multiple: True



###
##
# Controlling fan
## By Demand
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Demand ventilation speed" # Sets actual fan speed
    id: HRU_fan_demand_value
    register_type: holding
    address: 2010
    min_value: 0
    max_value: 399
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 0.0
        then:
          - number.set:
              id: HRU_fan_demand_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: HRU_fan_demand_on_off
              value: 0.0
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Demand ventialtion - on/off" # 0 = auto 1 = Manual
    id: HRU_fan_demand_on_off
    register_type: holding
    address: 2011
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true
## By Flow
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Flow ingress speed" # Sets actual fan speed
    id: HRU_fan_flow_ingress_value
    register_type: holding
    address: 2020
    min_value: 0
    max_value: 399
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 0.0
        then:
          - number.set:
              id: HRU_fan_flow_ingress_on_off
              value: 1.0
      - below: 1.0
        then:
          - number.set:
              id: HRU_fan_flow_ingress_on_off
              value: 0.0
  - platform: modbus_controller
    modbus_controller_id: hru
    name: "Flow ingress - on/off" # 0 = auto 1 = Manual
    id: HRU_fan_flow_ingress_on_off
    register_type: holding
    address: 2021
    min_value: 0
    max_value: 1
    step: 1
    use_write_multiple: true
###
# Create a fan entity in HA.
fan:
  - platform: speed
    id: wtw_fan
    name: "WTW - Fan"
    output: fanoutput
    # Create 7 speed van from 100 to 399 in 50 increments
    speed_count: 7

output:
  - platform: template
    id: fanoutput
    type: float
    # Wish it was a shorter lambda but here we are it works
    write_action:
      - if:
          condition:
            # If we turn the fan on, change the speed of the fan.
            lambda: return (id(wtw_fan).state);
          then:
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 1);
                then:
                  - logger.log: "fan_output_value: 1"
                  - number.set:
                      # This is technically redundant, as we automatically do it with HRU_fan_demand_value.
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      # set the speed.
                      id: HRU_fan_demand_value
                      value: 100
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 2);
                then:
                  - logger.log: "fan_output_value: 2"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 150
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 3);
                then:
                  - logger.log: "fan_output_value: 3"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 200
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 4);
                then:
                  - logger.log: "fan_output_value: 4"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 250
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 5);
                then:
                  - logger.log: "fan_output_value: 5"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 300
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 6);
                then:
                  - logger.log: "fan_output_value: 6"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 350
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 7);
                then:
                  - logger.log: "fan_output_value: 7"
                  - number.set:
                      id: HRU_fan_demand_on_off
                      value: 1.0
                  - number.set:
                      id: HRU_fan_demand_value
                      value: 399
      - if:
          condition:
            # If we turn the fan off.
            lambda: return !(id(wtw_fan).state);
          then:
            - logger.log: "fan_output_value: Back to auto"
            - number.set:
                id: HRU_fan_demand_on_off
                value: 0.0
